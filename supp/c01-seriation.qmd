---
title: "Seriation"
---

Load the data and summarize row and column sums. Also create burial with only the counts using Ripley type-varieties as rownames. Finally create burial_pct with percentages.

```{r load}
library(dplyr)
library(ca)
library(plotrix)
library(kableExtra)

# read data
data <- read.csv("seriate.allen.phase.csv")

# Row sums
(RS <- rowSums(data[, -(1)]))

# Column sums
CS <- colSums(data[, -(1)])
as.matrix(CS)
burial_ct <- data[, -(1)]
labels <- paste0(data$Burial)
rownames(burial_ct) <- labels
burial_pct <- burial_ct / RS  * 100
```

Use the first dimension of a correspondence analysis on burial_ct to provide an initial ordering of the data (ca_ord).

```{r ca, out.width = "100%", dpi = 300, echo=TRUE, warning=FALSE}
burial_ca <- ca(burial_ct)
plot.ca(burial_ca, labels=c(0, 2), cex = .75)

# Correspondence Analysis Ordering on Dimension 1
(ca_ord <- order(burial_ca$rowcoord[, 1]))
```

Use the first projection of a detrended correspondence analysis on burial_ct to provide an alternate ordering of the data (dec_ord). Use correlation to compare the two sequences. Detach packages that contain functions that interfere with the seriation package.

```{r decorana, out.width = "100%", dpi = 300, echo=TRUE, warning=FALSE}
library(vegan)
burial_dec <- decorana(burial_ct)
# Decorana Ordering on Projection 1
(dec_ord <- order(burial_dec$rproj[, 1]))
(cor.test(ca_ord, dec_ord, method = "kendall"))
detach("package:vegan")
detach("package:permute")
```

Load the seriation package to use the the manhattan distance matrices to compare the orderings. Robinson developed the method of seriation by permuting distance matrices. He used a similarity matrix where 200 was the index value for an ordering with itself. A perfect matrix should show consistent *decreases* from the diagonal horizontally and vertically. The seriation package implements this as a manhattan distance matrix where 0 is the index value for an ordering with itself. A perfect matrix should show consistent *increases* from the diagonal horizontally and vertically. The AR measure (Anti-Robinson) counts the number of times there is a decrease between adjacent values. The AR_deviation measure weights the index by the difference in values. These are loss measures meaning that low values are better. The Gradient_raw and Gradient_weighted indices are similar, but look at triplets. These are merit measures meaning that higher values are better. There are other options, but these are relatively straightforward.

The seriation package has multiple methods for seriating distance matrices. The ARSA (Anti-Robinson seriation by simulated annealing) method attempts to minimize the linear seriation criterion defined by Robinson. Two other methods use branch and bound algorithms (BBURCG and BBWRCG) focus on the gradient measures.

The battleship plot shows the BBURCG/BBWRCG orderings, which are consistent. ARSA ordering is consistent with BBURCG/BBWRCG orderings for 2, but is inverted for 3/5 and 1/4.

```{r seriation, out.width = "100%", dpi = 300, echo=TRUE, warning=FALSE}
library(seriation)
burial_dist <- dist(burial_pct, method="manhattan")
# Distance matrix:
round(burial_dist, 1)
set.seed(42)
burial_ser1 <- seriate(burial_dist, method="ARSA")
burial_ser2 <- seriate(burial_dist, method="BBURCG")
burial_ser3 <- seriate(burial_dist, method="BBWRCG")
ord1 <- get_order(burial_ser1)
ord2 <- get_order(burial_ser2)
ord3 <- get_order(burial_ser3)
# Suggested orderings
rbind(ord1, ord2, ord3)

Crit <- c("AR_events", "AR_deviations", "Gradient_raw", "Gradient_weighted")
burial_ord1 <- permute(burial_dist, ord1)
burial_ord2 <- permute(burial_dist, ord2)
burial_ord3 <- permute(burial_dist, ord3)
gahagan_dec_ord <- permute(burial_dist, dec_ord)
gahagan_ca_ord <- permute(burial_dist, ca_ord)

# Comparison between original and ordered:
Results <- list(Original=burial_dist, Ordered1=burial_ord1, Ordered2=burial_ord2, Ordered3=burial_ord3, CA=gahagan_ca_ord, DEC=gahagan_dec_ord)
round(sapply(Results, criterion, method=Crit), 1)

battleship.plot(burial_pct[ord2, ], 
                col="#798E87", 
                cex.labels = .75)
```
